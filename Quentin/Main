package com.example.quentinlehmann.test1;

import android.annotation.SuppressLint;
import android.graphics.Color;
import android.os.Environment;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.SeekBar;
import android.widget.SeekBar.OnSeekBarChangeListener;
import android.widget.Toast;
import android.widget.Toolbar;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UTFDataFormatException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;

public class MainActivity extends AppCompatActivity implements OnSeekBarChangeListener, View.OnTouchListener, View.OnClickListener {

    private SeekBar red;
    private SeekBar blue;
    private SeekBar green;
    private LinearLayout li, liRed, liBlue, liGreen;

    @SuppressLint("WrongViewCast")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate( savedInstanceState );
        setContentView( R.layout.activity_main );

        red = ((SeekBar) findViewById( R.id.seekBarRed ));
        blue = ((SeekBar) findViewById( R.id.seekBarBlue ));
        green = ((SeekBar) findViewById( R.id.seekBarGreen ));
        liRed = findViewById( R.id.LayoutRed );
        liBlue = findViewById( R.id.LayoutBlue );
        liGreen = findViewById( R.id.LayoutGreen );
        li = findViewById( R.id.layoutColor );
        red.setOnSeekBarChangeListener( this );
        green.setOnSeekBarChangeListener( this );
        blue.setOnSeekBarChangeListener( this );
        liRed.setBackgroundColor( Color.rgb( 255, 0, 0 ) );
        liGreen.setBackgroundColor( Color.rgb( 0, 255, 0 ) );
        liBlue.setBackgroundColor( Color.rgb( 0, 0, 255 ) );


    }


    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {

        liRed.setBackgroundColor( Color.rgb( red.getProgress(), 0, 0 ) );
        liGreen.setBackgroundColor( Color.rgb( 0, green.getProgress(), 0 ) );
        liBlue.setBackgroundColor( Color.rgb( 0, 0, blue.getProgress() ) );
        li.setBackgroundColor( Color.rgb( red.getProgress(), green.getProgress(), blue.getProgress() ) );
    }

    @Override
    public void onStartTrackingTouch(SeekBar seekBar) {

    }

    @Override
    public void onStopTrackingTouch(SeekBar seekBar) {

    }

    @Override
    public void onClick(View view) {
        String msg = "RED=" + red.getProgress() + ";GREEN=" + green.getProgress() + ";BLUE=" + blue.getProgress() + ";CIBLE=PROJO";
        final int server_port = 5000;
        InetAddress local = null;
        try {
            local = InetAddress.getByName( "172.20.10.11" ); //Wifi
            //local = InetAddress.getByName( "10.129.21.245" ); //reseau
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        byte[] buffer = msg.getBytes();
        DatagramSocket ds = null;
        try {
            DatagramPacket dp = new DatagramPacket( buffer, 0, buffer.length, local, server_port );

            ds = new DatagramSocket();
            ds.send( dp );
        } catch (SocketException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (ds != null) {
                ds.close();
            }
        }
    }


    @Override
    public boolean onTouch(View view, MotionEvent motionEvent) {
        return false;
    }

    ///////////////////////////////////////////////////////////////////////////////*


    @SuppressLint("ResourceType")
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        //ajoute les entrées de menu_test à l'ActionBar
        getMenuInflater().inflate( R.layout.menu, menu );
        return true;
    }

    private void effacer() {
        red.setProgress( 0 );
        green.setProgress( 0 );
        blue.setProgress( 0 );
    }

    private void quitter() {
        System.exit( 0 );
    }

    private void enregistrer() {
        String data = "RED=" + red.getProgress() + ";GREEN=" + green.getProgress() + ";BLUE=" + blue.getProgress() + ";CIBLE=PROJO";
        try {

            Toast.makeText(this, "Enregistrer", Toast.LENGTH_LONG).show();
            File chemin = this.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);
            File fichier = new File(chemin, "ProjoLED.txt");
            FileWriter filewriter = new FileWriter(fichier,true);
            filewriter.write(data+"\n");
            filewriter.close();

        } catch (IOException e) {
            Log.e("Exception", "File write failed: " + e.toString());
        }

    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {

            case R.id.action_delete:
                effacer();
                return true;

            case R.id.quitter:
                quitter();
                return true;

            case R.id.enregistrer:
                enregistrer();
                return true;
        }

        return super.onOptionsItemSelected( item );
    }
}
